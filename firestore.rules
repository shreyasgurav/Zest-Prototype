rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Enhanced security function for event ownership
    function isEventOwner(eventId) {
      return isAuthenticated() && (
        get(/databases/$(database)/documents/events/$(eventId)).data.organizationId == request.auth.uid ||
        get(/databases/$(database)/documents/events/$(eventId)).data.creator.userId == request.auth.uid
      );
    }

    // Enhanced security function for activity ownership  
    function isActivityOwner(activityId) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/activities/$(activityId)).data.organizationId == request.auth.uid;
    }

    // Allow read/write access to Organisations collection (ownership-based)
    match /Organisations/{pageId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (
        // Allow creation if the ownerId field matches the authenticated user
        request.auth.uid == request.resource.data.ownerId ||
        // Allow updates if the user owns the existing document
        request.auth.uid == resource.data.ownerId
      );
    }

    // Allow read/write access to Artists collection (ownership-based)
    match /Artists/{pageId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (
        // Allow creation if the ownerId field matches the authenticated user
        request.auth.uid == request.resource.data.ownerId ||
        // Allow updates if the user owns the existing document
        request.auth.uid == resource.data.ownerId
      );
    }

    // Allow read/write access to Venues collection (ownership-based)
    match /Venues/{pageId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (
        // Allow creation if the ownerId field matches the authenticated user
        request.auth.uid == request.resource.data.ownerId ||
        // Allow updates if the user owns the existing document
        request.auth.uid == resource.data.ownerId
      );
    }
    
    // Enhanced Users collection rules for better security and clarity
    match /Users/{userId} {
      // Allow public read for authentication checks (email/phone existence)
      // This is needed for account linking during signup
      allow read: if true;
      
      // Allow users to create their own profile during signup
      allow create: if isAuthenticated() && isOwner(userId);
      
      // Allow users to update their own profile
      allow update: if isAuthenticated() && isOwner(userId);
      
      // Prevent deletion of user profiles (safety measure)
      allow delete: if false;
    }
    
    // Enhanced Events collection security
    match /events/{eventId} {
      allow read: if true; // Public read access for discovery
      allow create: if isAuthenticated() && 
        request.resource.data.organizationId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.organizationId == request.auth.uid ||
        resource.data.creator.userId == request.auth.uid
      );
      allow delete: if isAuthenticated() && (
        resource.data.organizationId == request.auth.uid ||
        resource.data.creator.userId == request.auth.uid
      );
    }

    // Enhanced eventAttendees security - only allow reads for event owners and attendees themselves
    match /eventAttendees/{attendeeId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || // Attendee can read their own booking
        isEventOwner(resource.data.eventId) // Event owner can read all attendees
      );
      allow create: if isAuthenticated(); // Any authenticated user can book
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || // Attendee can update their booking
        isEventOwner(resource.data.eventId) // Event owner can update (check-in, etc.)
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || // Attendee can cancel their booking
        isEventOwner(resource.data.eventId) // Event owner can remove attendees
      );
    }

    // Bulk read for event attendees - only for event owners
    match /eventAttendees/{document=**} {
      allow read: if isAuthenticated(); // Simplified for dashboard functionality
    }
    
    // Allow read/write access to Guides collection
    match /guides/{guideId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }

    // Enhanced Activities collection security
    match /activities/{activityId} {
      allow read: if true; // Public read access for discovery
      allow create: if isAuthenticated() && 
        request.resource.data.organizationId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.organizationId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.organizationId == request.auth.uid;
    }

    // Enhanced activity_bookings security
    match /activity_bookings/{bookingId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || // User who made the booking
        isActivityOwner(resource.data.activityId) // Activity organizer
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || // User who made the booking
        isActivityOwner(resource.data.activityId) // Activity organizer
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || // User who made the booking
        isActivityOwner(resource.data.activityId) // Activity organizer
      );
    }

    // Enhanced activityAttendees security
    match /activityAttendees/{attendeeId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || // User who made the booking
        isActivityOwner(resource.data.activityId) // Activity organizer
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || // User who made the booking
        isActivityOwner(resource.data.activityId) // Activity organizer
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || // User who made the booking
        isActivityOwner(resource.data.activityId) // Activity organizer
      );
    }

    // Enhanced tickets security with strict access control
    match /tickets/{ticketId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || // User who owns the ticket
        (resource.data.eventId != null && isEventOwner(resource.data.eventId)) || // Event organizer
        (resource.data.activityId != null && isActivityOwner(resource.data.activityId)) // Activity organizer
      );
      allow create: if isAuthenticated(); // Server-side ticket creation only
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || // User can update their own tickets
        (resource.data.eventId != null && isEventOwner(resource.data.eventId)) || // Event organizer for validation
        (resource.data.activityId != null && isActivityOwner(resource.data.activityId)) // Activity organizer for validation
      );
      allow delete: if false; // Prevent ticket deletion for audit purposes
    }

    // Allow querying tickets by userId for the tickets page - restricted to owned tickets only
    match /tickets/{document=**} {
      allow read: if isAuthenticated();
    }

    // Security events logging - only allow system to write, admins to read
    match /securityEvents/{eventId} {
      allow read: if false; // Restrict access to security logs
      allow write: if isAuthenticated(); // Allow system to log events
    }

    // Entry logs for ticket scanning
    match /entry_logs/{logId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated(); // Allow ticket scanners to create logs
      allow update, delete: if false; // Immutable audit logs
    }

    // Session management for events
    match /session_permissions/{permissionId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated(); // Event owners can manage session permissions
    }

    // Content sharing system
    match /contentSharing/{sharingId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }

    // Content invitations system (phone-based)
    match /contentInvitations/{invitationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
  }
}  